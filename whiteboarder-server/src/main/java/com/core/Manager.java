package com.core;

import com.db.DatabaseConnector;
import com.model.*;

import java.util.List;
import java.util.Set;

/**
 * Manager is the class that ties the rest endpoints and whiteboarder web socket application to
 * the database connection.
 * @author Stephen Davidson
 * @author Jared Gorton
 */
public class Manager {

	/**
	 * getSession retrieves a whiteboarder session, and populates it with
	 * the corresponding edits.
	 * @param ctx the server context.
	 * @param wbID the uuid belonging to the requested whiteboarder session.
	 * @return the requested session, including a list of all the edits on that session.
	 */
	public static Whiteboard getSession(Context ctx, String wbID) throws WbException {
		Logger.log.info("Retrieving a session.");
		if (!isValid(ctx))
			throw new WbException(WbException.INVALID_CONTEXT);

		Whiteboard wb = ctx.getDbc().getWhiteboard(wbID);
		List<Edit> edits = ctx.getDbc().getEdits(wbID);
		for (Edit edit : edits)
			edit.setPoints(ctx.getDbc().getPoints(edit.getEditID()));
		wb.setEdits(edits);
		return wb;
	}

	/**
	 * createSession creates a new whiteboarder session and returns it.
	 * @param ctx the server context.
	 * @return the newly created whiteboarder session.
	 */
	public static Whiteboard createSession(Context ctx) throws WbException {
		Logger.log.info("Creating a session.");
		if (!isValid(ctx))
			throw new WbException(WbException.INVALID_CONTEXT);
		else if (ctx.getUser() == null)
			throw new WbException(WbException.INVALID_USER);

		Whiteboard wb = new Whiteboard("New Whiteboard");

		ctx.getDbc().addWhiteboard(wb);
		return wb;
	}

	/**
	 * renameSession renames an existing session. Throws an exception if the whiteboarder 
	 * session does not exist.
	 * @param ctx the server context.
	 * @param wbID the uuid belonging to the requested whiteboarder session.
	 * @param newName the new name the whiteboarder session will be renamed to.
	 */
	public static void renameSession(Context ctx, String wbID, String newName) throws WbException {
		Logger.log.info("Renaming a session.");
		if (!isValid(ctx))
			throw new WbException(WbException.INVALID_CONTEXT);
		else if (wbID == null)
			throw new WbException(WbException.INVALID_SESSION);
		else if (newName == null)
			throw new WbException(WbException.INVALID_NAME);

		ctx.getDbc().renameWhiteboard(wbID, newName);
	}

	/**
	 * uploadImage adds a new Image and relates it to an existing whiteboarder
	 * session. Throws an exception if the requested whiteboarder session does not exist.
	 * @param ctx the server context.
	 * @param wbID the uuid belonging to the requested whiteboarder session.
	 * @param img the new Image to be added to the whiteboarder session.
	 */
	public static void uploadImage(Context ctx, String wbID, Image img) throws WbException {
		Logger.log.info("Uploading an image.");
		if (!isValid(ctx))
			throw new WbException(WbException.INVALID_CONTEXT);
		else if (wbID == null)
			throw new WbException(WbException.INVALID_SESSION);

		img = (img != null) ? img : new Image(wbID, "Blank Image", null);
		ctx.getDbc().getWhiteboard(wbID); // Confirm that the Whiteboard exists
		img = ctx.getDbc().addImage(img);
	}

	/**
	 * getImage returns the most recent Image uploaded to a whiteboarder session. Throws an 
	 * exception if the requested whiteboarder session does not exist.
	 * @param ctx the server context.
	 * @param wbID the uuid belonging to the requested whiteboarder session.
	 * @return the most recent Image uploaded the requested whiteboarder session.
	 */
	public static Image getImage(Context ctx, String wbID) throws WbException {
		Logger.log.info("Retrieving an image.");
		if (!isValid(ctx))
			throw new WbException(WbException.INVALID_CONTEXT);

		ctx.getDbc().getWhiteboard(wbID); // Confirm that the Whiteboard exists
		return ctx.getDbc().getImage(wbID);
	}

	/**
	 * applyEdit applies an edit to an existing whiteboarder session. Throws an exception
	 * if the edit's whiteboarder session or user does not exist.
	 * @param ctx the server context.
	 * @param edit the new edit to be applied.
	 * @return the edit being applied, now with the autogenerated edit id.
	 */
	public static Edit applyEdit(Context ctx, Edit edit) throws WbException {
		Logger.log.info("Applying an edit.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(edit.getWbID()); // Confirm that the Whiteboard exists
		ctx.getDbc().getUser(edit.getWbID(), edit.getUsername()); // Confirm that the User exists
		Edit storedEdit = ctx.getDbc().addEdit(edit);
		for (Point p : edit.getPoints())
			p.setEditID(storedEdit.getEditID());
		ctx.getDbc().addPoints(edit.getPoints());
		return storedEdit;
	}

	/**
	 * removeEdit removes an edit from an existing whiteboarder session. Throws an exception
	 * if the edit's whiteboarder session or user does not exist.
	 * @param ctx the server context.
	 * @param edit the edit to be removed.
	 */
	public static void removeEdit(Context ctx, Edit edit) throws WbException {
		Logger.log.info("Removing an edit.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(edit.getWbID()); // Confirm that the Whiteboard exists
		ctx.getDbc().getUser(edit.getWbID(), edit.getUsername()); // Confirm that the User exists
		ctx.getDbc().removeEdit(edit);
		ctx.getDbc().removePoints(edit.getEditID());
	}

	/**
	 * addUser adds a user to an existing whiteboarder session with a given username. Throws an 
	 * exception if the whiteboarder session does not exist.
	 * @param ctx the server context.
	 * @param sessionID the uuid belonging to the requested whiteboarder session.
	 * @param username the name belonging to the new user.
	 */
	public static void addUser(Context ctx, String sessionID, String username) throws WbException {
		Logger.log.info("Adding a user.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(sessionID); // Confirm that the Whiteboard exists
		User user = new User(sessionID, username, Mode.COLLABORATOR);
		ctx.getDbc().addUser(user);
	}

	/**
	 * removeUser removes a user from an existing whiteboarder session with a given username. Throws an 
	 * exception if the whiteboarder session does not exist.
	 * @param ctx the server context.
	 * @param sessionID the uuid belonging to the requested whiteboarder session.
	 * @param username the name belonging to the removed user.
	 */
	public static void removeUser(Context ctx, String sessionID, String username) throws WbException {
		Logger.log.info("Removing a user.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(sessionID); // Confirm that the Whiteboard exists
		User user = new User(sessionID, username, Mode.COLLABORATOR);
		ctx.getDbc().removeUser(user);
	}

	/**
	 * sendMessage adds a message to an existing whiteboarder session. Throws an exception if 
	 * the message's whiteboarder session or user does not exist.
	 * @param ctx the server context.
	 * @param msg the new message.
	 */
	public static Message sendMessage(Context ctx, Message msg) throws WbException {
		Logger.log.info("Sending a message.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(msg.getWbID());
		ctx.getDbc().getUser(msg.getWbID(), msg.getUsername());
		Message storedMsg = ctx.getDbc().addMessage(msg);
		return storedMsg;
	}

	/**
	* removeMessage removes a message from an existing whiteboarder session. Throws an exception if 
	 * the message's whiteboarder session or user does not exist.
	* @param ctx the server context.
	* @param msg the message to be removed.
	*/
	public static void removeMessage(Context ctx, Message msg) throws WbException {
		Logger.log.info("Deleting a message.");
		if (!isValid(ctx)) {
			throw new WbException(WbException.INVALID_CONTEXT);
		}

		ctx.getDbc().getWhiteboard(msg.getWbID());
		ctx.getDbc().getUser(msg.getWbID(), msg.getUsername());
		ctx.getDbc().removeMessage(msg);
	}

	/**
	 * getUsers gets all the users in an existing whiteboarder session. Throws an exception
	 * if the whiteboarder session does not exist.
	 * @param ctx the server context.
	 * @param sessionID the uuid belonging to the requested whiteboarder session.
	 */
	public static Set<User> getUsers(Context ctx, String sessionID) throws WbException {
		Logger.log.info("Retrieving users.");
		if (!isValid(ctx)) {
			throw new WbException("Invalid context");
		}

		ctx.getDbc().getWhiteboard(sessionID); // Confirm that the Whiteboard exists
		return ctx.getDbc().getUsers(sessionID);
	}

	private static boolean isValid(Context ctx) {
		return ctx != null && ctx.isValid();
	}
}
